#! @PERL@


#
# File:  prints-to-blocks.pl
# Date:  @DATE@
# Package:  @SOFTWARE@-@VERSION@
# Programmer:  Jimmy Y. Huang (@CONTACT_JIMMY@)
# ------------------------------------------------------------
# This script reformats the ungapped local sequence alignments in PRINTS
# to the BLOCKS format.  After the core BLOCKS have been constructed by
# PROTOMAT, BLOCKS+ merges those ungapped local sequence alignments from
# PRINTS that do not come from families of proteins cross-referenced in the
# PROSITE database with the core BLOCKS.  BLIMPS is used to calibrate those
# PRINTS alignments that got incorporated and to perform some statistics on
# them.  Each sequence is assigned, for example, a weighting factor by
# BLIMPS.   Since the construction of eMOTIFS does not depend on the
# BLIMPS-generated statistics, the prints-to-blocks.pl script simply fills
# in dummy values in those fields.
#
# The following excerpt is what a PRINTS alignment that got absorbed
# looks like in the file blocks.dat.
# 
#
#     ID   GLABLOOD; BLOCK
#     AC   PR00001A; distance from previous block=(4,67)
#     DE   COAGULATION FACTOR GLA DOMAIN SIGNATURE
#     BL   adapted; width=14; seqs=31; 99.5%=690; strength=1355;
#     THRB_MOUSE (  48) FLEELRKGNLEREC  45
#       THRB_RAT (  48) FLEELRKGNLEREC  45
#     THRB_BOVIN (  48) FLEEVRKGNLEREC  48
#     THRB_HUMAN (  47) FLEEVRKGNLEREC  48
#       BOVTHBNM (  48) FLEEVRKGNLEREC  48
#     FA10_BOVIN (  44) FLEEVKQGNLEREC  50
#       CHKTHROM (  48) FLEEMIKGNLEREC  69
#      FA7_HUMAN (  64) FLEELRPGSLEREC  52
#         S56300 (  43) FLEELRPGSLEREC  52
#     PRTS_BOVIN (  45) LLEETKKGNLEREC  56
#
# 
# The following excerpt is what the same alignment, generated by
# prints-to-blocks.pl looks like.
#
# 
#     ID   GLABLOOD1; BLOCK
#     AC   PR00001A; distance from previous block=(0,0)
#     DE   Coagulation factor Gla domain motif I
#     BL   adapted;
#     THRB_MOUSE  (   48) FLEELRKGNLEREC 100
#     THRB_RAT    (   48) FLEELRKGNLEREC 100
#     THRB_BOVIN  (   48) FLEEVRKGNLEREC 100
#     THRB_HUMAN  (   47) FLEEVRKGNLEREC 100
#     BOVTHBNM    (   48) FLEEVRKGNLEREC 100
#     FA10_BOVIN  (   44) FLEEVKQGNLEREC 100
#     CHKTHROM    (   48) FLEEMIKGNLEREC 100
#     FA7_HUMAN   (   64) FLEELRPGSLEREC 100
#     S56300      (   43) FLEELRPGSLEREC 100
#     PRTS_BOVIN  (   45) LLEETKKGNLEREC 100
# ------------------------------------------------------------
# @COPYRIGHT@ 
# All Rights Reserved.
# The Leland Stanford Junior University Board of Trustees
#


@letterArray = ();
$letterArray[1] = "A";
$letterArray[2] = "B";
$letterArray[3] = "C";
$letterArray[4] = "D";
$letterArray[5] = "E";
$letterArray[6] = "F";
$letterArray[7] = "G";
$letterArray[8] = "H";
$letterArray[9] = "I";
$letterArray[10] = "J";
$letterArray[11] = "K";
$letterArray[12] = "L";
$letterArray[13] = "M";
$letterArray[14] = "N";
$letterArray[15] = "O";
$letterArray[16] = "P";
$letterArray[17] = "Q";
$letterArray[18] = "R";
$letterArray[19] = "S";
$letterArray[20] = "T";
$letterArray[21] = "U";
$letterArray[22] = "V";
$letterArray[23] = "W";
$letterArray[24] = "X";
$letterArray[25] = "Y";
$letterArray[26] = "Z";


@romanNumeralArray = ();
$romanNumeralArray[1] = "I";
$romanNumeralArray[2] = "II";
$romanNumeralArray[3] = "III";
$romanNumeralArray[4] = "IV";
$romanNumeralArray[5] = "V";
$romanNumeralArray[6] = "VI";
$romanNumeralArray[7] = "VII";
$romanNumeralArray[8] = "VIII";
$romanNumeralArray[9] = "IX";
$romanNumeralArray[10] = "X";
$romanNumeralArray[11] = "XI";
$romanNumeralArray[12] = "XII";
$romanNumeralArray[13] = "XIII";
$romanNumeralArray[14] = "XIV";
$romanNumeralArray[15] = "XV";
$romanNumeralArray[16] = "XVI";
$romanNumeralArray[17] = "XVII";
$romanNumeralArray[18] = "XVIII";
$romanNumeralArray[19] = "XIX";
$romanNumeralArray[20] = "XX";
$romanNumeralArray[21] = "XXI";
$romanNumeralArray[22] = "XXII";
$romanNumeralArray[23] = "XXIII";
$romanNumeralArray[24] = "XXIV";
$romanNumeralArray[25] = "XXV";
$romanNumeralArray[26] = "XXVI";


&Main;

exit;


sub Main {
    &ProcessPRINTSAlignments;
}


# ----------
# Subroutine:  ProcessPRINTSAlignments
# ==========
#
# ----------

sub ProcessPRINTSAlignments {
    #-----------------#
    # Local Variables #
    #-----------------#    
    my $line = "";
    my $globalPRINTSID = "";
    my $printsID = "", my $accession = "", my $fullName = "", my $taxonomy = "";
    my $sequence = "", my $startID = "", my $tag = "", my $previousTag = "";
    my $taxonomyLength = 0, my $startIDLength = 0, my $numSpaces = 0;
    my $blockNumber = 0, my $blockLetter = "";

    while ($line = <>) {
	chomp ($line);

	$tag = substr ($line, 0, 3);

	if ($tag eq "gx;") {
	    ($accession) = ($line =~ m|^gx;\s(\w+)|o);
	} elsif ($tag eq "gc;") {
	    ($globalPRINTSID) = ($line =~ m|^gc;\s(\w+)|o);
	} elsif ($tag eq "fc;") {
	    ($printsID) = ($line =~ m|^fc;\s(\w+\s*\d*$)|o);
	    
	    print "ID   $printsID; BLOCK\n";

	    ($blockNumber) = ($printsID =~ m|$globalPRINTSID\s{0,}(\d*)$|);

	    $blockLetter = $letterArray[$blockNumber];

	    print "AC   $accession$blockLetter; distance from previous block=(0,0)\n";
	    print "DE   $fullName $romanNumeralArray[$blockNumber]\n";
	    print "BL   adapted;\n";
	} elsif ($tag eq "gt;") {
	    ($fullName) = ($line =~ m|^gt;\s(.+)|o);
	} elsif ($tag eq "fd;") {
	    ($sequence, $taxonomy, $startID) = ($line =~ m|fd;\s(\w+)\s+(\S+)\s+(\w+)|o);

	    $taxonomyLength = length ($taxonomy);
	    print "$taxonomy ";
	    $numSpaces = 11 - $taxonomyLength;
	    print " " x $numSpaces;

	    $startIDLength = length ($startID);
	    $numSpaces = 5 - $startIDLength;
	    print "(";
	    print " " x $numSpaces;
	    print "$startID) ";
	    print "$sequence 100\n";
	} elsif ($tag eq "bb;") {
	    if ($previousTag eq "fd;") {
		print "//\n";
	    }
	} else {
	}

	$previousTag = $tag;
    }
}

